services:
  postgres:
    image: postgres:16.3
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./postgres_data/data/:/var/lib/postgresql/data
      - ./postgres_data_backups/:/var/lib/postgresql/backups
      # docker run --rm -v %cd%/postgres_data:/var/lib/postgresql/data -d postgres:latest
      # docker run --rm --volumes-from 0e8349798677 -v %cd%/postgres_data:/target debian cp -a /var/lib/postgresql/data /target
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"


  redis:
    image: redis
    container_name: redis
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5


  migrations:
    build:
      context: ../../backend/
      dockerfile: Dockerfile
    container_name: migrations
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python manage.py migrate


  api:
    build:
      context: ../../backend/.
      dockerfile: Dockerfile
    container_name: api
    env_file:
      - ./.env
    volumes:
      - ./static/:/app/cinema/backend/static/.
      - ../../../media_cinema/:/app/media_cinema/.
      - ../../backend/:/app/cinema/backend/.
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    restart: always
    command: bash -c "python manage.py collectstatic --noinput && daphne -b 0.0.0.0 -p 8000 backend.asgi:application"


  frontend:
    build:
      context: ../../frontend/
      dockerfile: Dockerfile
    container_name: frontend
    depends_on:
      - api
    restart: always


  nginx:
    build:
      dockerfile: Dockerfile
      context: ./nginx/
    container_name: nginx
    volumes:
      - ./static:/app/static
      - ../../../media_cinema/:/app/media_cinema
    depends_on:
      - frontend
    ports:
      - ${NGINX_EXTERNAL_PORT}:80
      - ${NGINX_EXTERNAL_SSL_PORT}:443
    restart: unless-stopped
